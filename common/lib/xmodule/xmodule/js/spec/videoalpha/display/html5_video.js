// Generated by CoffeeScript 1.6.3
(function() {

  describe('VideoAlpha HTML5Video', function() {
    var STATUS, file, html5Sources, onReady, onStateChange, playbackRates, playerVars;
    playbackRates = [0.75, 1.0, 1.25, 1.5];
    STATUS = window.YT.PlayerState;
    playerVars = {
      controls: 0,
      wmode: 'transparent',
      rel: 0,
      showinfo: 0,
      enablejsapi: 1,
      modestbranding: 1,
      html5: 1
    };
    file = window.location.href.replace(/\/common(.*)$/, '') + '/test_root/data/videoalpha/gizmo';
    html5Sources = {
      mp4: "" + file + ".mp4",
      webm: "" + file + ".webm",
      ogg: "" + file + ".ogv"
    };
    onReady = jasmine.createSpy('onReady');
    onStateChange = jasmine.createSpy('onStateChange');
    beforeEach(function() {
      loadFixtures('videoalpha_html5.html');
      this.el = $('#example').find('.video');
      this.player = new HTML5Video.Player(this.el, {
        playerVars: playerVars,
        videoSources: html5Sources,
        events: {
          onReady: onReady,
          onStateChange: onStateChange
        }
      });
      this.videoEl = this.el.find('.video-player video').get(0);
    });

    it('PlayerState', function() {
      expect(HTML5Video.PlayerState).toEqual(STATUS);
    });

    describe('constructor', function() {
      it('create an html5 video element', function() {
        expect(this.el.find('.video-player div')).toContain('video');
      });

      it('check if sources are created in correct way', function() {
        var sources, videoSources, videoTypes;
        sources = $(this.videoEl).find('source');
        videoTypes = [];
        videoSources = [];
        $.each(html5Sources, function(index, source) {
          videoTypes.push(index);
          videoSources.push(source);
        });
        return $.each(sources, function(index, source) {
          var s;
          s = $(source);
          expect($.inArray(s.attr('src'), videoSources)).not.toEqual(-1);
          expect($.inArray(s.attr('type').replace('video/', ''), videoTypes)).not.toEqual(-1);
        });
      });

      it('check if click event is handled on the player', function() {
        expect(this.videoEl).toHandle('click');
      });
    });
    xdescribe('events:', function() {
      beforeEach(function() {
        spyOn(this.player, 'callStateChangeCallback').andCallThrough();
      });

      describe('click', function() {
        describe('when player is paused', function() {
          beforeEach(function() {
            spyOn(this.videoEl, 'play').andCallThrough();
            this.player.playerState = STATUS.PAUSED;
            $(this.videoEl).trigger('click');
          });

          it('native play event was called', function() {
            expect(this.videoEl.play).toHaveBeenCalled();
          });

          it('player state was changed', function() {
            expect(this.player.playerState).toBe(STATUS.PLAYING);
          });

          it('callback was called', function() {
            expect(this.player.callStateChangeCallback).toHaveBeenCalled();
          });
        });

        describe('when player is played', function() {
          beforeEach(function() {
            spyOn(this.videoEl, 'pause').andCallThrough();
            this.player.playerState = STATUS.PLAYING;
            $(this.videoEl).trigger('click');
          });

          it('native pause event was called', function() {
            expect(this.videoEl.pause).toHaveBeenCalled();
          });

          it('player state was changed', function() {
            expect(this.player.playerState).toBe(STATUS.PAUSED);
          });

          it('callback was called', function() {
            expect(this.player.callStateChangeCallback).toHaveBeenCalled();
          });
        });
      });

      describe('play', function() {
        beforeEach(function() {
          spyOn(this.videoEl, 'play').andCallThrough();
          this.player.playerState = STATUS.PAUSED;
          this.videoEl.play();
        });

        it('native event was called', function() {
          expect(this.videoEl.play).toHaveBeenCalled();
        });

        it('player state was changed', function() {
          waitsFor((function() {
            this.player.playerState !== HTML5Video.PlayerState.PAUSED;
          }), 'Player state should be changed', 1000);
          runs(function() {
            expect(this.player.playerState).toBe(STATUS.PLAYING);
          });
        });

        it('callback was called', function() {
          waitsFor((function() {
            this.player.playerState !== STATUS.PAUSED;
          }), 'Player state should be changed', 1000);
          runs(function() {
            expect(this.player.callStateChangeCallback).toHaveBeenCalled();
          });
        });
      });

      describe('pause', function() {
        beforeEach(function() {
          spyOn(this.videoEl, 'pause').andCallThrough();
          this.videoEl.play();
          this.videoEl.pause();
        });

        it('native event was called', function() {
          expect(this.videoEl.pause).toHaveBeenCalled();
        });

        it('player state was changed', function() {
          waitsFor((function() {
            this.player.playerState !== STATUS.UNSTARTED;
          }), 'Player state should be changed', 1000);
          runs(function() {
            expect(this.player.playerState).toBe(STATUS.PAUSED);
          });
        });

        it('callback was called', function() {
          waitsFor((function() {
            this.player.playerState !== HTML5Video.PlayerState.UNSTARTED;
          }), 'Player state should be changed', 1000);
          runs(function() {
            expect(this.player.callStateChangeCallback).toHaveBeenCalled();
          });
        });
      });

      describe('canplay', function() {
        beforeEach(function() {
          waitsFor((function() {
            this.player.playerState !== STATUS.UNSTARTED;
          }), 'Video cannot be played', 1000);
        });

        it('player state was changed', function() {
          runs(function() {
            expect(this.player.playerState).toBe(STATUS.PAUSED);
          });
        });

        it('end property was defined', function() {
          runs(function() {
            expect(this.player.end).not.toBeNull();
          });
        });

        it('start position was defined', function() {
          runs(function() {
            expect(this.videoEl.currentTime).toBe(this.player.start);
          });
        });

        it('callback was called', function() {
          runs(function() {
            expect(this.player.config.events.onReady).toHaveBeenCalled();
          });
        });
      });

      describe('ended', function() {
        beforeEach(function() {
          waitsFor((function() {
            this.player.playerState !== STATUS.UNSTARTED;
          }), 'Video cannot be played', 1000);
        });

        it('player state was changed', function() {
          runs(function() {
            jasmine.fireEvent(this.videoEl, "ended");
            expect(this.player.playerState).toBe(STATUS.ENDED);
          });
        });

        it('callback was called', function() {
          jasmine.fireEvent(this.videoEl, "ended");
          expect(this.player.callStateChangeCallback).toHaveBeenCalled();
        });
      });

      describe('timeupdate', function() {
        beforeEach(function() {
          spyOn(this.videoEl, 'pause').andCallThrough();
          waitsFor((function() {
            this.player.playerState !== STATUS.UNSTARTED;
          }), 'Video cannot be played', 1000);
        });

        it('player should be paused', function() {
          runs(function() {
            this.player.end = 3;
            this.videoEl.currentTime = 5;
            jasmine.fireEvent(this.videoEl, "timeupdate");
            expect(this.videoEl.pause).toHaveBeenCalled();
          });
        });

        it('end param should be re-defined', function() {
          runs(function() {
            this.player.end = 3;
            this.videoEl.currentTime = 5;
            jasmine.fireEvent(this.videoEl, "timeupdate");
            expect(this.player.end).toBe(this.videoEl.duration);
          });
        });
      });
    });

    xdescribe('methods:', function() {
      beforeEach(function() {
        waitsFor((function() {
          this.volume = this.videoEl.volume;
          this.seek = this.videoEl.currentTime;
          this.player.playerState === STATUS.PAUSED;
        }), 'Video cannot be played', 1000);
      });

      it('pauseVideo', function() {
        spyOn(this.videoEl, 'pause').andCallThrough();
        this.player.pauseVideo();
        expect(this.videoEl.pause).toHaveBeenCalled();
      });

      describe('seekTo', function() {
        it('set new correct value', function() {
          runs(function() {
            this.player.seekTo(2);
            expect(this.videoEl.currentTime).toBe(2);
          });
        });

        it('set new inccorrect values', function() {
          runs(function() {
            this.player.seekTo(-50);
            expect(this.videoEl.currentTime).toBe(this.seek);
            this.player.seekTo('5');
            expect(this.videoEl.currentTime).toBe(this.seek);
            this.player.seekTo(500000);
            expect(this.videoEl.currentTime).toBe(this.seek);
          });
        });
      });

      describe('setVolume', function() {
        it('set new correct value', function() {
          runs(function() {
            this.player.setVolume(50);
            expect(this.videoEl.volume).toBe(50 * 0.01);
          });
        });

        it('set new inccorrect values', function() {
          runs(function() {
            this.player.setVolume(-50);
            expect(this.videoEl.volume).toBe(this.volume);
            this.player.setVolume('5');
            expect(this.videoEl.volume).toBe(this.volume);
            this.player.setVolume(500000);
            expect(this.videoEl.volume).toBe(this.volume);
          });
        });
      });

      it('getCurrentTime', function() {
        runs(function() {
          this.videoEl.currentTime = 3;
          expect(this.player.getCurrentTime()).toBe(this.videoEl.currentTime);
        });
      });

      it('playVideo', function() {
        runs(function() {
          spyOn(this.videoEl, 'play').andCallThrough();
          this.player.playVideo();
          expect(this.videoEl.play).toHaveBeenCalled();
        });
      });

      it('getPlayerState', function() {
        runs(function() {
          this.player.playerState = STATUS.PLAYING;
          expect(this.player.getPlayerState()).toBe(STATUS.PLAYING);
          this.player.playerState = STATUS.ENDED;
          expect(this.player.getPlayerState()).toBe(STATUS.ENDED);
        });
      });

      it('getVolume', function() {
        runs(function() {
          this.volume = this.videoEl.volume = 0.5;
          expect(this.player.getVolume()).toBe(this.volume);
        });
      });

      it('getDuration', function() {
        runs(function() {
          this.duration = this.videoEl.duration;
          expect(this.player.getDuration()).toBe(this.duration);
        });
      });

      describe('setPlaybackRate', function() {
        it('set a correct value', function() {
          this.playbackRate = 1.5;
          this.player.setPlaybackRate(this.playbackRate);
          expect(this.videoEl.playbackRate).toBe(this.playbackRate);
        });

        it('set NaN value', function() {
          this.playbackRate = NaN;
          this.player.setPlaybackRate(this.playbackRate);
          expect(this.videoEl.playbackRate).toBe(1.0);
        });
      });

      it('getAvailablePlaybackRates', function() {
        expect(this.player.getAvailablePlaybackRates()).toEqual(playbackRates);
      });
    });
  });

}).call(this);
